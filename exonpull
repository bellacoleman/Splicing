import pandas as pd
from Bio import SeqIO
import requests


def get_seqs(file1, file2):
    
    # reads file1 to get all gene IDs, transcript IDs, exon IDs, and exon ranks
    
    all_ids_w_ranks = pd.read_csv(file1, compression = 'gzip')
    
    # takes first df (above) and breaks up exon IDs into a list that will be used 
    # to retrieve all exon seqs from ensembl server directly
    # (have to do this because biomart won't load that many exons into 1 file 
    # even when you request it to be emailed)
    
    exon_id_df = pd.DataFrame(all_ids_w_ranks['Exon stable ID'].unique())
 #   exon_id_df['Sequence'] = 'NA'
    exon_id_df.columns = ['Exon stable ID' if x==0 else x for x in exon_id_df.columns]
    exon_ids = exon_id_df['Exon stable ID'].tolist()
    id_chunks = [exon_ids[x:x+50] for x in range(0, len(exon_ids), 50)]
    
    # gets all the exon seqs from ensembl's data 

    dfs = []
    i = 0

    for k in range(i, len(id_chunks)):
        chunk = id_chunks[k]
        c ='{ "ids" : ["'  + "\",\"".join(chunk) + '"] }'
    
        server = "https://rest.ensembl.org"
        ext = "/sequence/id"
        headers={ "Content-Type" : "application/json", "Accept" : "application/json"}
        r = requests.post(server+ext, headers=headers, data = c)
 
        if not r.ok:
            r.raise_for_status()
            sys.exit()
 
        decoded = r.json()
        dfs.append(pd.DataFrame(decoded))
        i = i + 1
        
    full_seqs = pd.concat(dfs).reset_index(drop= True)        


    
#     exon_dict = {'Exon stable ID': [], 'Exon Sequence': []}

#     for record in SeqIO.parse(file2, 'fasta'):

#         exon_dict['Exon stable ID'].append(record.id)
#         exon_dict['Exon Sequence'].append(record.seq)
    
#     prelim_exons = pd.DataFrame(exon_dict)
    
#     transcript_ids = all_ids_w_ranks.groupby('Transcript stable ID').size().reset_index()
#     transcript_ids.rename(columns = {0:'Number of Exons'}, inplace = True )
#     rearranged_all_ids = pd.merge(all_ids_w_ranks, transcript_ids, on = 'Transcript stable ID', how = 'left')
    
#    all_data_flawed = pd.merge(rearranged_all_ids, prelim_exons, on = "Exon stable ID", how = 'left')
    



    
#    all_data_flawed['Exon stable ID']= all_data_flawed['Exon stable ID'].astype(str)

    
    full_seqs['id'] = full_seqs['id'].astype(str)
    
    trans_seq = pd.merge(all_ids_w_ranks, full_seqs, left_on = 'Exon stable ID', right_on = 'id', how = 'left')
    
    return trans_seq
