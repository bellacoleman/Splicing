import pandas as pd
import re
import exonpull


file = input('Enter file name: ')
trans_seq = exonpull.get_seqs(file)

# makes new df called df_organized which just has the transcript ID and full transcript sequence
# also creates trans_seq which has gene ID, transcript ID, exon rank and ID, and exon sequence

transgroup = trans_seq.groupby('Transcript stable ID')
trans_seq = trans_seq.sort_values(by = 'Exon rank in transcript')
df_organized = trans_seq.groupby('Transcript stable ID')['seq'].apply(''.join)

# determines length of exon and creates new column in trans_seq to store this
# need this in order to determine where exon boundaries are (exon cuts) later

def exonlength(row):
    exon = row['seq']
    length = len(exon)
    
    return length

trans_seq["exon length"] = trans_seq.apply(exonlength, axis = 1)

# creates new column in trans_seq that corresponds to the base where the exon is cut in the transcript by taking into account its rank

trans_seq = trans_seq.sort_values(by = ['Transcript stable ID', 'Exon rank in transcript'])
trans_seq['Exon Cuts'] = trans_seq.groupby('Transcript stable ID').cumsum()['exon length']

df_organized = pd.DataFrame(df_organized)

# getting each transcript cut down so it starts with "ATG"
# this gets rid of any 5' UTR

def modify_first(row):
    import re
     
    sequ = row['seq']   # may have to change name here if it is not seq instead
    if type(sequ) is str:
        match = re.search('ATG', sequ)
        if match:
            spot = match.span()[0]
            mod1_seq = row['seq'][spot:]
        else:
            mod1_seq = 'error: no start codon matched'
    else:
        mod1_seq = 'error: not a string'

    
    return mod1_seq

df_organized["5' Truncated Sequence"] = df_organized.apply(modify_first, axis = 1)

# cutting off 3' UTR

def end_cut(row):
    
    sequence = row["5' Truncated Sequence"]
    new = [sequence[i:i+3] for i in range(0, len(sequence), 3)]
 
    new = ["STOP" if (x=='TAG') else x for x in new]
    new = ["STOP" if (x=='TGA') else x for x in new]
    new = ["STOP" if (x=='TAA') else x for x in new] 

    if not 'STOP' in new: new[0] = 'STOP'
    spot = new.index('STOP')
    str_spot = spot*3
    modseq = ''.join(new)[:str_spot]
    return modseq
 
df_organized['Fully Truncated Transcript Sequence'] = df_organized.apply(end_cut, axis = 1 ) 

# determines where the ATG is aka where the transcript will first be cut

def firstcut(row):
    import re
     
    sequ = row['seq']   
    if type(sequ) is str:
        match = re.search('ATG', sequ)
        if match:
            spot = match.span()[0]
        else:
            spot = 'error: no start codon matched'
            
    return spot

df_organized["5' Cut"] = df_organized.apply(firstcut, axis = 1 ) 

# creates new column in df_organized that contains a list of all the exon cuts
# this does not include the 5' or 3' cut, those have their own column, but this number corresponds to the location of the cut in the full transcript sequence so if the transcript is GAGATGGAG---GAGTAGAGG and there is an exon boundary at spot 9 (where the dash is), the exon cuts category will be [9] 

df_organized['Exon cuts'] = trans_seq.groupby('Transcript stable ID')['Exon Cuts'].apply(list)

# determines placement of the 3' cut and makes this a new column in df_organized

def lastcut(row):
    
    sequence = row["5' Truncated Sequence"]
    new = [sequence[i:i+3] for i in range(0, len(sequence), 3)]
 
    new = ["STOP" if (x=='TAG') else x for x in new]
    new = ["STOP" if (x=='TGA') else x for x in new]
    new = ["STOP" if (x=='TAA') else x for x in new] 

    if not 'STOP' in new: new[0] = 'STOP'
    spot = new.index('STOP')
    str_spot = spot*3 
    if type(row["5' Cut"]) is str:
        str_spot = 'N/A'
    else:
        str_spot = str_spot + row["5' Cut"]
        
    return str_spot
 
df_organized["3' Cut"] = df_organized.apply(lastcut, axis = 1 ) 


df_organized['Exon IDs'] = trans_seq.groupby('Transcript stable ID')['Exon stable ID'].apply(list)
